use crate::{common::*, hidden::*};
use serde::{Deserialize, Serialize};
use crate::fetch::{fetch, FetchError};

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Channel {
    #[serde(rename = "author")]
    pub name: String,
    #[serde(rename = "authorId")]
    pub id: String,
    #[serde(rename = "authorUrl")]
    pub url: String,
    #[serde(rename = "authorBanners")]
    pub banners: Vec<CommonImage>,
    #[serde(rename = "authorThumbnails")]
    pub thumbnails: Vec<CommonImage>,

    #[serde(rename = "subCount")]
    pub subscribers: u32,
    #[serde(rename = "totalViews")]
    pub total_views: u64,
    pub joined: u64,

    #[serde(rename = "autoGenerated")]
    pub auto_generated: bool,
    #[serde(rename = "isFamilyFriendly")]
    pub family_friendly: bool,
    pub description: String,
    #[serde(rename = "descriptionHtml")]
    pub description_html: String,
    #[serde(rename = "allowedRegions")]
    pub allowed_regions: Vec<CountryCode>,

    #[serde(rename = "latestVideos")]
    pub latest_videos: Vec<CommonVideo>,

    #[serde(rename = "relatedChannels")]
    pub related_channels: Vec<RelatedChannel>,
}

impl Channel {
    fn url(server: &str, args: &str) -> String {
        format!("{server}/api/v1/channels/{args}")
    }

    pub async fn fetch_channel(server: &str, id: &str, args: Option<&str>) -> Result<Self, FetchError> {
        let channel_url: String = Self::url(server, id);
        let channel_json: String = fetch(&channel_url).await?;
        let channel: Self = serde_json::from_str(&channel_json)?;
        Ok(channel)
    }

    fn channel_link(&self, server: &str) -> String {
        format!("{}/channel/{}", server, &self.url)
    }
}

impl PartialEq for Channel {
    fn eq(&self, other: &Self) -> bool {
        *&self.id.eq(&other.id) &&
            *&self.name.eq(&other.name) &&
            *&self.url.eq(&other.url)
    }
}
